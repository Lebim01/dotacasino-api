generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  USD
}

enum KycStatus {
  PENDING // Registrado, sin iniciar KYC
  SUBMITTED // Documentos subidos por el usuario
  UNDER_REVIEW // En revisión por el equipo/compliance
  APPROVED // Verificado
  REJECTED // Rechazado (puede requerir reintento)
  SUSPENDED // Cuenta/kyc bloqueado temporalmente
}

enum KycDocType {
  PASSPORT
  ID_CARD
  DRIVER_LICENSE
  ADDRESS_PROOF
  SELFIE
}

enum KycDocStatus {
  UPLOADED
  VERIFIED
  REJECTED
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  firstName    String    @default("")
  lastName     String    @default("")
  country      String
  kycStatus    KycStatus @default(PENDING)
  wallets      Wallet[]
  createdAt    DateTime  @default(now())
  passwordHash String
  roles        String[]  @default(["user"])
  firebaseId   String    @default("")
  refCodeL     String?   @unique @db.VarChar(16)
  refCodeR     String?   @unique @db.VarChar(16)
  // ---- Perfil ----
  displayName  String?
  phone        String?
  language     String?
  avatarUrl    String?

  // --Pays
  stdMexId      String?
  stdMex StdMex? @relation(fields: [stdMexId], references: [id])

  RefreshToken  RefreshToken[]
  KycDocument   KycDocument[]
  KycSubmission KycSubmission[]
  Topup         Topup[]
  gameSessions  BetSession[]
  Referral      Referral[]
  PasswordReset PasswordReset[]
}

model StdMex {
  id           String @id @default(uuid())
  clabe        String
  bank         String
  instructions Json
  User         User[]
}

model Wallet {
  id       String        @id @default(uuid())
  userId   String
  user     User          @relation(fields: [userId], references: [id])
  currency Currency      @default(USD)
  balance  Decimal       @default(0)
  ledger   LedgerEntry[]

  @@unique([userId, currency])
}

model LedgerEntry {
  id        String   @id @default(uuid())
  walletId  String
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  kind      String // DEPOSIT, WITHDRAWAL, BET_PLACE, BET_WIN, FEE
  amount    Decimal // > 0 en créditos; < 0 en débitos
  meta      Json
  createdAt DateTime @default(now())

  balanceAfter   Decimal? // snapshot de saldo post-movimiento (opcional)
  idempotencyKey String?  @unique
}

enum GameCategory {
  slots
  live_dealers
  fast_games
  crash_games
  table_games
  lottery
  card
  roulette
  video_poker
  arcade
  sport
}

model GameProvider {
  id            String   @id @default(uuid())
  code          String   @unique // ej. "AG"
  name          String // ej. "Asia Gaming"
  platformTypes String[] // ej. ["AGIN","AGQ","AGNW","SLOT"]
  apiKey        String? // si aplica
  games         Game[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Game {
  id             String        @id @default(uuid())
  betId          String
  slug           String        @unique
  title          String
  gameType       String? // ej. "BAC", "DT", "ROU" (Live); o vacío para lobby
  rtp            Decimal?      @db.Decimal(5, 2)
  devices        String[] // ["DESKTOP","MOBILE"]
  tags           String[] // ["popular","nuevo"]
  enabled        Boolean       @default(true)
  order          Int           @default(0)
  category       GameCategory?
  thumbnailUrl   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  GameProvider   GameProvider? @relation(fields: [gameProviderId], references: [id])
  gameProviderId String?
  sessions       BetSession[]
  allowDemo      Boolean       @default(false)
  width          String        @default("0")
  show           Boolean       @default(true)
  priority       Int           @default(1)

  @@index([enabled])
}

model BetSession {
  id        String   @id @default(uuid())
  userId    String
  user      User?    @relation(fields: [userId], references: [id])
  gameId    String
  game      Game?    @relation(fields: [gameId], references: [id])
  sessionId String
  createdAt DateTime @default(now())
}

model BetTicket {
  id             String   @id @default(uuid())
  userId         String
  gameId         String
  stake          Decimal
  status         String
  payout         Decimal?
  createdAt      DateTime @default(now())
  meta           Json
  idempotencyKey String?  @unique
}

model Referral {
  id       String  @id @default(uuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id])
  parentId String?
  level    Int

  @@index([parentId], map: "referral_parent_idx")
  @@index([userId], map: "referral_user_idx")
}

model ProviderPostTransfer {
  id              String   @id @default(uuid())
  provider        String
  uniqueKey       String   @unique // "AG|<transactionID>|<billNo|->"
  transactionID   String
  billNo          String?
  transactionType String
  ticketStatus    String?
  playname        String
  currency        String
  netAmount       Decimal?
  validBetAmount  Decimal?
  value           Decimal?
  balanceAfter    Decimal
  responseCode    String
  finish          Boolean?
  createdAt       DateTime @default(now())
}

model RefreshToken {
  id        String    @id // = jti del JWT (uuid)
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  tokenHash String // hash del RT (argon2)
  familyId  String // agrupa una cadena de rotaciones
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  expiresAt DateTime

  @@index([userId])
  @@index([familyId])
}

model KycDocument {
  id          String       @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  type        KycDocType
  status      KycDocStatus @default(UPLOADED)
  storageKey  String // ruta/clave en tu storage (S3/GCS)
  mimeType    String
  country     String?
  expiresAt   DateTime?
  checksum    String?
  reviewerId  String?
  reviewNotes String? // breve razón rechazo/verificación
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId, type])
}

model KycSubmission {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // snapshot de doc ids incluidos en esta sumisión
  documentIds String[] // guarda IDs al momento de "submit"

  submittedAt  DateTime?
  decidedAt    DateTime?
  decidedBy    String?
  decision     KycStatus? // APPROVED / REJECTED / UNDER_REVIEW
  decisionNote String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Topup {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  amount         Decimal
  currency       Currency @default(USD)
  status         String   @default("SUCCEEDED") // "PENDING"|"SUCCEEDED"|"FAILED"|"CANCELED"
  provider       String   @default("DIRECT") // "DIRECT" (dev) / "STRIPE" / "COINBASE"...
  providerRef    String?
  idempotencyKey String?  @unique
  createdAt      DateTime @default(now())

  @@index([userId])
}

model Server {
  id             String   @id @default(uuid())
  name           String
  url            String
  thumbnailUrl   String?
  primaryColor   String
  secondaryColor String
  enabled        Boolean  @default(true)
  createdAt      DateTime @default(now())
}

model PasswordReset {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  tokenHash String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  ip        String?
  userAgent String?

  @@index([userId])
}
