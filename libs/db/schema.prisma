generator client {
  provider = "prisma-client-js"
  // output = "../node_modules/@prisma/client" // opcional
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  USD
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  country       String
  kycStatus     String   @default("PENDING")
  wallets       Wallet[]
  createdAt     DateTime @default(now())
  passwordHash  String
  roles         String[] @default(["user"])
  // ---- Perfil ----
  displayName   String?
  phone         String?
  language      String?
  avatarUrl     String?
}


model Wallet {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  currency  Currency  @default(USD)
  balance   Decimal   @default(0)
  ledger    LedgerEntry[]

  @@unique([userId, currency])
}

model LedgerEntry {
  id        String   @id @default(uuid())
  walletId  String
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  kind      String   // DEPOSIT, WITHDRAWAL, BET_PLACE, BET_WIN, FEE
  amount    Decimal  // > 0 en créditos; < 0 en débitos
  meta      Json
  createdAt DateTime @default(now())

  balanceAfter    Decimal? // snapshot de saldo post-movimiento (opcional)
  idempotencyKey  String?  @unique
}

enum GameCategory {
  LIVE
  EGAME
  TABLE
  OTHER
}

model GameProvider {
  id            String   @id @default(uuid())
  code          String   @unique            // ej. "AG"
  name          String                      // ej. "Asia Gaming"
  platformTypes String[]                    // ej. ["AGIN","AGQ","AGNW","SLOT"]
  apiKey        String?                     // si aplica
  games         Game[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Game {
  id             String        @id @default(uuid())
  slug           String        @unique
  title          String
  providerId     String
  provider       GameProvider  @relation(fields: [providerId], references: [id])
  category       GameCategory
  platformType   String        // ej. "AGIN", "AGQ", "SLOT"
  gameType       String?       // ej. "BAC", "DT", "ROU" (Live); o vacío para lobby
  providerGameId String?       // ej. "SB49" (EGames), billNo/gid si aplica
  rtp            Decimal?      @db.Decimal(5,2)
  devices        String[]      // ["DESKTOP","MOBILE"]
  tags           String[]      // ["popular","nuevo"]
  enabled        Boolean       @default(true)
  order          Int           @default(0)
  thumbnailUrl   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([enabled, category, platformType])
}

model BetTicket { 
  id String @id @default(uuid())
  userId String
  gameId String
  stake Decimal
  status String
  payout Decimal?
  createdAt DateTime @default(now()) 
}

model Referral { 
  id String @id @default(uuid())
  userId String
  parentId String?
  level Int 
}

model ProviderPostTransfer {
  id               String   @id @default(uuid())
  provider         String
  uniqueKey        String   @unique // "AG|<transactionID>|<billNo|->"
  transactionID    String
  billNo           String?
  transactionType  String
  ticketStatus     String?
  playname         String
  currency         String
  netAmount        Decimal?
  validBetAmount   Decimal?
  value            Decimal?
  balanceAfter     Decimal
  responseCode     String
  finish           Boolean?
  createdAt        DateTime @default(now())
}